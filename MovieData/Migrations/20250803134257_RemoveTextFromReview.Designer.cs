// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieData;

#nullable disable

namespace MovieData.Migrations
{
    [DbContext(typeof(MovieDbContext))]
    [Migration("20250803134257_RemoveTextFromReview")]
    partial class RemoveTextFromReview
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MovieCore.Entities.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BirthYear")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Actors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthYear = 1964,
                            Name = "Keanu Reeves"
                        },
                        new
                        {
                            Id = 2,
                            BirthYear = 1967,
                            Name = "Carrie-Anne Moss"
                        },
                        new
                        {
                            Id = 3,
                            BirthYear = 1961,
                            Name = "Laurence Fishburne"
                        },
                        new
                        {
                            Id = 4,
                            BirthYear = 1968,
                            Name = "Will Smith"
                        });
                });

            modelBuilder.Entity("MovieCore.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Sci-Fi"
                        });
                });

            modelBuilder.Entity("MovieCore.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Duration = 136,
                            GenreId = 4,
                            Title = "The Matrix",
                            Year = 1999
                        },
                        new
                        {
                            Id = 2,
                            Duration = 98,
                            GenreId = 1,
                            Title = "Men in Black",
                            Year = 1997
                        },
                        new
                        {
                            Id = 3,
                            Duration = 101,
                            GenreId = 1,
                            Title = "John Wick",
                            Year = 2014
                        });
                });

            modelBuilder.Entity("MovieCore.Entities.MovieActor", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MovieId", "ActorId");

                    b.HasIndex("ActorId");

                    b.ToTable("MovieActors");

                    b.HasData(
                        new
                        {
                            MovieId = 1,
                            ActorId = 1,
                            Role = "Neo"
                        },
                        new
                        {
                            MovieId = 1,
                            ActorId = 2,
                            Role = "Trinity"
                        },
                        new
                        {
                            MovieId = 1,
                            ActorId = 3,
                            Role = "Morpheus"
                        },
                        new
                        {
                            MovieId = 2,
                            ActorId = 4,
                            Role = "Agent J"
                        },
                        new
                        {
                            MovieId = 3,
                            ActorId = 1,
                            Role = "John Wick"
                        });
                });

            modelBuilder.Entity("MovieCore.Entities.MovieDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Budget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("Synopsis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MovieId")
                        .IsUnique();

                    b.ToTable("MovieDetails");
                });

            modelBuilder.Entity("MovieCore.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ReviewerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "En fantastisk film!",
                            MovieId = 1,
                            Rating = 5,
                            ReviewerName = "Alice"
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Spännande och nyskapande.",
                            MovieId = 1,
                            Rating = 4,
                            ReviewerName = "Bob"
                        },
                        new
                        {
                            Id = 3,
                            Comment = "Rolig och underhållande.",
                            MovieId = 2,
                            Rating = 4,
                            ReviewerName = "Charlie"
                        },
                        new
                        {
                            Id = 4,
                            Comment = "Intensiv action!",
                            MovieId = 3,
                            Rating = 5,
                            ReviewerName = "Diana"
                        });
                });

            modelBuilder.Entity("MovieCore.Entities.Movie", b =>
                {
                    b.HasOne("MovieCore.Entities.Genre", "Genre")
                        .WithMany("Movies")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("MovieCore.Entities.MovieActor", b =>
                {
                    b.HasOne("MovieCore.Entities.Actor", "Actor")
                        .WithMany("MovieActors")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieCore.Entities.Movie", "Movie")
                        .WithMany("MovieActors")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieCore.Entities.MovieDetails", b =>
                {
                    b.HasOne("MovieCore.Entities.Movie", "Movie")
                        .WithOne("MovieDetails")
                        .HasForeignKey("MovieCore.Entities.MovieDetails", "MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieCore.Entities.Review", b =>
                {
                    b.HasOne("MovieCore.Entities.Movie", "Movie")
                        .WithMany("Reviews")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieCore.Entities.Actor", b =>
                {
                    b.Navigation("MovieActors");
                });

            modelBuilder.Entity("MovieCore.Entities.Genre", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("MovieCore.Entities.Movie", b =>
                {
                    b.Navigation("MovieActors");

                    b.Navigation("MovieDetails");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
